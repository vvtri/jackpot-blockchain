/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers';
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomicfoundation/hardhat-ethers/types';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: 'UUPSUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: 'IERC1822Proxiable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: 'IBeacon',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: 'ERC1967Utils',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: 'Address',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: 'Lottery',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Lottery__factory>;
    getContractFactory(
      name: 'LotteryDeclaration',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LotteryDeclaration__factory>;
    getContractFactory(
      name: 'LotteryState',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LotteryState__factory>;
    getContractFactory(
      name: 'PayableUUPSUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PayableUUPSUpgradeable__factory>;
    getContractFactory(
      name: 'BuyLotteryTicketTest',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BuyLotteryTicketTest__factory>;
    getContractFactory(
      name: 'LotteryTest',
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.LotteryTest__factory>;

    getContractAt(
      name: 'Initializable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: 'UUPSUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: 'IERC1822Proxiable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: 'IBeacon',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: 'ERC1967Utils',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: 'Address',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Address>;
    getContractAt(
      name: 'Lottery',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.Lottery>;
    getContractAt(
      name: 'LotteryDeclaration',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.LotteryDeclaration>;
    getContractAt(
      name: 'LotteryState',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.LotteryState>;
    getContractAt(
      name: 'PayableUUPSUpgradeable',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.PayableUUPSUpgradeable>;
    getContractAt(
      name: 'BuyLotteryTicketTest',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.BuyLotteryTicketTest>;
    getContractAt(
      name: 'LotteryTest',
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<Contracts.LotteryTest>;

    deployContract(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: 'UUPSUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: 'IERC1822Proxiable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: 'IBeacon',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: 'ERC1967Utils',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: 'Address',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Address>;
    deployContract(
      name: 'Lottery',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Lottery>;
    deployContract(
      name: 'LotteryDeclaration',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.LotteryDeclaration>;
    deployContract(
      name: 'LotteryState',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.LotteryState>;
    deployContract(
      name: 'PayableUUPSUpgradeable',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.PayableUUPSUpgradeable>;
    deployContract(
      name: 'BuyLotteryTicketTest',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BuyLotteryTicketTest>;
    deployContract(
      name: 'LotteryTest',
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.LotteryTest>;

    deployContract(
      name: 'Initializable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: 'UUPSUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: 'IERC1822Proxiable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: 'IBeacon',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: 'ERC1967Utils',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: 'Address',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Address>;
    deployContract(
      name: 'Lottery',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.Lottery>;
    deployContract(
      name: 'LotteryDeclaration',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.LotteryDeclaration>;
    deployContract(
      name: 'LotteryState',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.LotteryState>;
    deployContract(
      name: 'PayableUUPSUpgradeable',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.PayableUUPSUpgradeable>;
    deployContract(
      name: 'BuyLotteryTicketTest',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.BuyLotteryTicketTest>;
    deployContract(
      name: 'LotteryTest',
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<Contracts.LotteryTest>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer,
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions,
    ): Promise<ethers.Contract>;
  }
}
